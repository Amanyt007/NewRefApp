@model IEnumerable<InvestmentPlan>

@{
    ViewData["Title"] = "Investment Plans";
    var categories = Model.Select(p => p.Category).Distinct().ToList();
    var categoryCount = 0;
}
<div class="container-fluid p-0">
    <div class="card bg-pink-gradient text-center text-white p-3 h1">
        Investment Opportunities
    </div>
</div>
<div class="container mt-4 investmentplans">
    

    <div class="tab-wrapper">
        <div class="tabs">
            @foreach (var category in categories)
            {
                categoryCount++;
                <button class="tab @(category == categories.First() ? "active" : "")" data-tab="@category">@category</button>
                if (categoryCount==4)
                {
                    break;
                }
            }
        </div>

        @foreach (var category in categories)
        {
            <div class="tab-content @(category == categories.First() ? "active" : "")" id="@category" style="display: @(category == categories.First() ? "block" : "none");">
                <div class="card p-3">
                    <h4 class="text-center py-2 text-dark">@category Plans</h4>
                    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                        @foreach (var plan in Model.Where(p => p.Category == category))
                        {
                            int duration = 0;
                            if (!string.IsNullOrEmpty(plan.RevenueDurationValue))
                            {
                                var match = System.Text.RegularExpressions.Regex.Match(plan.RevenueDurationValue, @"\d+");
                                if (match.Success)
                                {
                                    duration = int.Parse(match.Value);
                                }
                            }
                            var totalIncome = (plan.DailyEarningsPerUnit ?? plan.HourlyEarningsPerUnit ?? 0) * duration;
                            var maxInvestment = 100;

                            <div class="col">
                                <div class="card tile-card">
                                    <div class="tile-header text-center">
                                        <h5 class="plan-title">@plan.Name</h5>
                                    </div>
                                    <div class="tile-image">
                                        <img src="@plan.ImagePath" alt="Plan Image" class="img-fluid">
                                    </div>
                                    <div class="tile-body">
                                        <div class="tile-grid">
                                            <div class="tile-box">
                                                <div class="tile-value">₹@plan.InvestmentAmount</div>
                                                <div class="tile-label">Price</div>
                                            </div>
                                            <div class="tile-box">
                                                <div class="tile-value">₹@(plan.DailyEarningsPerUnit ?? 0)</div>
                                                <div class="tile-label">Daily profit</div>
                                            </div>
                                            <div class="tile-box">
                                                <div class="tile-value">@plan.RevenueDurationValue @(plan.HourlyEarningsPerUnit.HasValue ? "Day(s)" : "Day(s)")</div>
                                                <div class="tile-label">Duration</div>
                                            </div>
                                            <div class="tile-box">
                                                <div class="tile-value">₹@totalIncome</div>
                                                <div class="tile-label">Total profit</div>
                                            </div>
                                        </div>
                                        <button class="presale-btn invest-btn" data-id="@plan.Id" data-name="@plan.Name" data-amount="@plan.InvestmentAmount" data-duration="@plan.RevenueDurationValue" data-daily="@(plan.DailyEarningsPerUnit ?? 0)" data-max="@maxInvestment" data-toggle="modal" data-target="#investModal">
                                            Invest Now
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="investModal" tabindex="-1" aria-labelledby="investModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content color-darkBlue text-start tile-card">
            <div class="modal-header">
                <h5 class="modal-title" id="investModalLabel">Confirm Investment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">
                    @* <span aria-hidden="true">×</span> *@
                </button>
            </div>
            <div class="modal-body">
                <form id="investForm" asp-action="Invest" asp-controller="Home" method="post">
                    <input type="hidden" id="planId" name="planId" />
                    <div class="form-group">
                        <label class="my-1">Plan Name</label>
                        <input type="text" class="form-control" id="planName" name="planName" readonly />
                    </div>
                    <div class="form-group">
                        <label class="my-1">Each Price</label>
                        <input type="text" class="form-control" id="eachPrice" name="eachPrice" readonly />
                    </div>
                    <div class="form-group">
                        <label class="my-1">Revenue Duration</label>
                        <input type="text" class="form-control" id="revenueDuration" name="revenueDuration" readonly />
                    </div>
                    <div class="form-group">
                        <label class="my-1">Daily Earnings</label>
                        <input type="text" class="form-control" id="dailyEarnings" name="dailyEarnings" readonly />
                    </div>
                    <div class="form-group">
                        <label class="my-1">Total Income</label>
                        <input type="text" class="form-control" id="totalIncome" name="totalIncome" readonly />
                    </div>
                    <div class="form-group">
                        <label class="my-1">Max Investment</label>
                        <input type="text" class="form-control" id="maxInvestment" name="maxInvestment" readonly />
                    </div>
                    <div class="form-group">
                        <label class="my-2">Buy Share</label>
                        <input type="number" class="form-control" id="quantity" name="quantity" min="1" max="2" required />
                    </div>
                    <div class="form-group">
                        <label class="my-2">Pay Money</label>
                        <input type="text" class="form-control" id="payMoney" name="payMoney" readonly />
                    </div>
                    <div class="form-group">
                        <label class="my-2">Expected Total Revenue</label>
                        <input type="text" class="form-control" id="expectedRevenue" name="expectedRevenue" readonly />
                    </div>
                    <button type="submit" id="investBtn" class="btn btn-pink mt-3">Invest Now</button>
                </form>
            </div>
        </div>
    </div>
</div>
<style>
    .spinner-border.text-primary.text-white {
        color: #000 !important;
    }
</style>
@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const tabs = document.querySelectorAll(".tab");
            const contents = document.querySelectorAll(".tab-content");
            const quantityInput = document.getElementById("quantity");
            const investBtn = document.getElementById("investBtn");
            const payMoney = document.getElementById("payMoney");
            const expectedRevenue = document.getElementById("expectedRevenue");

            tabs.forEach((tab) => {
                tab.addEventListener("click", () => {
                    tabs.forEach((t) => t.classList.remove("active"));
                    tab.classList.add("active");

                    const selected = tab.getAttribute("data-tab");
                    contents.forEach((c) => {
                        c.style.display = c.id === selected ? "block" : "none";
                        if (c.id === selected) c.classList.add("active");
                        else c.classList.remove("active");
                    });
                });
            });

            $('.invest-btn').on('click', function () {
                const id = $(this).data('id');
                const name = $(this).data('name');
                const amount = $(this).data('amount');
                const duration = $(this).data('duration');
                const daily = $(this).data('daily');
                const max = $(this).data('max');
                const totalIncome = daily * duration;

                $('#planId').val(id);
                $('#planName').val(name);
                $('#eachPrice').val('₹' + amount);
                $('#revenueDuration').val(duration + (daily == 0 ? ' Day(s)' : ' Day(s)'));
                $('#dailyEarnings').val('₹' + daily);
                $('#totalIncome').val('₹' + totalIncome);
                $('#maxInvestment').val(max);
                $('#quantity').val(1).attr('max', max);
                $('#payMoney').val('₹' + amount);
                $('#expectedRevenue').val('₹' + totalIncome);

                $('#investModal').modal('show');
            });

            quantityInput.addEventListener("input", function () {
                const qty = parseInt(this.value) || 1;
                const amount = parseFloat($('#eachPrice').val().replace('₹', '')) || 0;
                const daily = parseFloat($('#dailyEarnings').val().replace('₹', '')) || 0;
                const duration = parseInt($('#revenueDuration').val().split(' ')[0]) || 0;
                const max = parseInt($('#maxInvestment').val()) || 1;

                if (qty > max) this.value = max;
                const totalPay = amount * qty;
                const totalRev = daily * duration * qty;
                payMoney.value = '₹' + totalPay.toFixed(2);
                expectedRevenue.value = '₹' + totalRev.toFixed(2);
                investBtn.disabled = qty < 1 || qty > max;
            });

            $("#investForm").on("submit", function (e) {
                e.preventDefault();
                $('#loaderModal').modal('show');
                const quantity = parseInt(quantityInput.value);
                if (quantity > 0 && quantity <= parseInt($('#maxInvestment').val())) {
                    $.ajax({
                        url: "/Home/Invest",
                        type: "POST",
                        data: $(this).serialize(),
                        success: function (response) {
                            $('#loaderModal').modal('hide');
                            if (response.success) {
                                alert(response.message);
                                $('#investModal').modal('hide');
                                location.reload();
                            } else {
                                alert(response.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            alert("Error processing investment: " + error);
                        }
                    });
                }
            });
        });
    </script>
}

@* <style>
    .tab-wrapper {
        max-width: 1200px;
        width: 100%;
    }

    .tabs {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
    }

    .tab {
        flex: 1;
        padding: 12px;
        background: #ffc0cb;
        color: #fff;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-weight: bold;
    }

        .tab.active {
            background: #d60087;
            color: white;
        }

    .tile-card {
        border-radius: 16px;
        background: linear-gradient(145deg, #ffe6ee, #ffffff);
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        overflow: hidden;
        text-align: center;
        padding: 1rem;
    }

    .tile-header .plan-title {
        font-size: 1.2rem;
        font-weight: bold;
        color: #d60087;
    }

    .tile-image img {
        width: 100%;
        height: auto;
        border-radius: 10px;
        margin-bottom: 1rem;
    }

    .tile-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 10px;
        margin-bottom: 1rem;
    }

    .tile-box {
        background: #fff0f5;
        border-radius: 8px;
        padding: 10px;
    }

    .tile-value {
        font-size: 1.1rem;
        font-weight: bold;
        color: #d60087;
    }

    .tile-label {
        font-size: 0.85rem;
        color: #333;
    }

    .presale-btn {
        background: linear-gradient(to right, #ec407a, #d81b60);
        border: none;
        color: white;
        font-weight: bold;
        padding: 10px 20px;
        border-radius: 6px;
        width: 100%;
    }

    .btn-pink {
        background-color: #d60087;
        color: white;
        border: none;
    }
</style> *@
